#!/bin/bash
# This script installs Apache, PHP ${php_version}, Node.js ${nodejs_version}, and required dependencies

# Exit on error
set -e

# Configuration
PHP_VERSION="${php_version}"
NODEJS_VERSION="${nodejs_version}"
LOG_FILE="/var/log/server-setup.log"

# Simple logging function
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Error handling function
handle_error() {
    log "ERROR: An error occurred at line $1, exiting"
    exit 1
}

trap 'handle_error $LINENO' ERR

# Ensure the log file exists
touch "$LOG_FILE"
log "Starting server setup script"

# Fix DNS resolution issues
log "Fixing DNS resolution"
echo "nameserver 8.8.8.8" >> /etc/resolv.conf
echo "nameserver 8.8.4.4" >> /etc/resolv.conf

# Make the DNS changes persistent
cat > /etc/systemd/resolved.conf << EOF
[Resolve]
DNS=8.8.8.8 8.8.4.4
FallbackDNS=1.1.1.1 9.9.9.9
EOF

# Restart systemd-resolved
systemctl restart systemd-resolved

# Test DNS resolution
log "Testing DNS resolution"
if ping -c 1 google.com > /dev/null 2>&1; then
    log "DNS resolution is working properly"
else
    log "WARNING: DNS resolution still has issues, but proceeding anyway"
fi

# Update and upgrade the system
log "Updating package lists"
apt-get update && DEBIAN_FRONTEND=noninteractive apt-get upgrade -y

# Install Apache2
log "Installing Apache"
apt-get install -y apache2 apache2-utils

# Enable Apache Mods
log "Enabling Apache mods"
a2enmod rewrite ssl proxy proxy_http headers

# Restart Apache after enabling mods
log "Restarting Apache after enabling modules"
systemctl restart apache2
log "Apache installed successfully"
log "Apache Version: $(apache2 -v | grep -i apache | awk '{print $1 $3}')"

# Install PHP and extensions
log "Adding PHP repository"
LC_ALL=C.UTF-8 add-apt-repository -y ppa:ondrej/php
apt-get update -y

log "Installing PHP $PHP_VERSION and extensions"
apt-get install -y php$PHP_VERSION php$PHP_VERSION-cli php$PHP_VERSION-common \
                   php$PHP_VERSION-curl php$PHP_VERSION-mbstring php$PHP_VERSION-mysql \
                   php$PHP_VERSION-xml php$PHP_VERSION-zip php$PHP_VERSION-bcmath \
                   php$PHP_VERSION-intl php$PHP_VERSION-gd libapache2-mod-php$PHP_VERSION \
                   php$PHP_VERSION-fpm php$PHP_VERSION-pgsql

# Configure PHP for Apache
log "Configuring PHP for Apache"
# Ensure the correct PHP module is enabled for Apache
a2dismod php* 2>/dev/null || true
a2enmod php$PHP_VERSION

# Create phpinfo.php file to verify installation
log "Creating PHP info file"
cat > /var/www/html/phpinfo.php << 'EOF'
<?php phpinfo(); ?>
EOF

# Install Composer
log "Installing Composer"
# Set HOME and COMPOSER_HOME environment variables
export HOME=/root
export COMPOSER_HOME=/root/.composer
mkdir -p "$COMPOSER_HOME"

# Install Composer
curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Verify Composer installation
if [ -f /usr/local/bin/composer ]; then
    log "Composer installed successfully"
    composer --version >> "$LOG_FILE" 2>&1
else
    log "WARNING: Composer installation failed"
fi

# Install Node.js
log "Installing Node.js $NODEJS_VERSION"
mkdir -p /etc/apt/keyrings
curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODEJS_VERSION.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list
apt-get update
apt-get install -y nodejs

# Install PM2 for Node.js
log "Installing PM2 for Node.js"
npm install -g pm2
pm2 startup systemd -u root

# Create a simple health check file
log "Creating health check file"
cat > /var/www/html/health-check.php << 'EOF'
<?php
// Basic health check script
header("Content-Type: application/json");
$status = [
  "status" => "ok",
  "timestamp" => date("Y-m-d H:i:s"),
  "hostname" => gethostname(),
  "apache" => apache_get_version(),
  "php" => phpversion(),
  "extensions" => [
    "mysql" => extension_loaded('mysqli') ? 'available' : 'not available',
    "pgsql" => extension_loaded('pgsql') ? 'available' : 'not available'
  ]
];
echo json_encode($status, JSON_PRETTY_PRINT);
?>
EOF

# Create a welcome page
log "Creating welcome page"
cat > /var/www/html/index.html << 'EOF'
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Web Application Server</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      margin: 0;
      padding: 20px;
      color: #333;
    }
    .container {
      max-width: 800px;
      margin: 0 auto;
      background-color: #f5f5f5;
      padding: 20px;
      border-radius: 5px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    h1 {
      color: #2c3e50;
      border-bottom: 2px solid #3498db;
      padding-bottom: 10px;
    }
    ul {
      list-style-type: square;
      padding-left: 25px;
    }
    a {
      color: #3498db;
      text-decoration: none;
    }
    a:hover {
      text-decoration: underline;
    }
    .info {
      background-color: #e8f4f8;
      padding: 15px;
      border-radius: 4px;
      margin: 20px 0;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>Your Web Application Server</h1>
    <p>This server has been successfully set up with Apache, PHP, and Node.js.</p>
    
    <div class="info">
      <h2>Server Information</h2>
      <ul>
        <li>Server IP: <script>document.write(window.location.hostname);</script></li>
        <li>Check the <a href="/health-check.php">health check endpoint</a> for more details.</li>
      </ul>
    </div>
    
    <h2>Available Test Pages</h2>
    <ul>
      <li><a href="/phpinfo.php">PHP Information</a></li>
    </ul>
    
    <p><strong>Note:</strong> For security reasons, you should remove the test pages before deploying to production.</p>
  </div>
</body>
</html>
EOF

# Set proper permissions
log "Setting file permissions"
chown -R www-data:www-data /var/www/html
find /var/www/html -type d -exec chmod 755 {} \;
find /var/www/html -type f -exec chmod 644 {} \;

# Restart Apache to apply all changes
log "Restarting Apache"
systemctl restart apache2
systemctl enable apache2

# Verify installations
log "PHP Version: $(php -v | head -n 1)"
log "Node.js Version: $(node -v)"

log "Server setup completed successfully"
log "You can access phpinfo at: http://SERVER_IP/phpinfo.php"
log "You can access the health check at: http://SERVER_IP/health-check.php"