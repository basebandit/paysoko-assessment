---
- name: Setup Bastion Host
  hosts: bastion
  become: yes
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        
    - name: Install required packages
      apt:
        name:
          - openssh-server
          - python3
          - python3-pip
          - curl
          - wget
          - unzip
          - jq
        state: present
        
    - name: Allow SSH through firewall
      ufw:
        rule: allow
        port: ssh
        
    - name: Enable UFW
      ufw:
        state: enabled
        policy: deny
        
    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present
        reload: yes

- name: Setup Node.js Application Servers
  hosts: nodejs_servers
  become: yes
  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
        
    - name: Install required packages
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common
          - apache2
          - python3-pip
          - python3-certbot-apache
        state: present
        
    - name: Add Docker GPG apt key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
        
    - name: Add Docker repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        
    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose-plugin
        state: present
        
    - name: Install Docker Python package
      pip:
        name: docker
        state: present
        
    - name: Start and enable Docker service
      service:
        name: docker
        state: started
        enabled: yes
        
    - name: Create Docker network
      docker_network:
        name: app_network
        state: present
        
    - name: Pull application Docker image
      docker_image:
        name: "{{ app_image }}"
        source: pull
        
    - name: Create environment file for application
      copy:
        dest: "/opt/{{ app_name }}.env"
        content: |
          NODE_ENV=production
          DB_HOST={{ db_host }}
          DB_PORT={{ db_port }}
          DB_NAME={{ db_name }}
          DB_USER={{ db_user }}
          DB_PASSWORD={{ lookup('env', 'DB_PASSWORD') }}
          DB_SSL={{ db_ssl }}
          {% if env_extras is defined %}
          {% for key, value in env_extras.items() %}
          {{ key }}={{ value }}
          {% endfor %}
          {% endif %}
        mode: '0600'
        
    - name: Run application container
      docker_container:
        name: "{{ app_name }}"
        image: "{{ app_image }}"
        state: started
        restart_policy: always
        networks:
          - name: app_network
        ports:
          - "{{ app_port }}:{{ app_port }}"
        env_file: "/opt/{{ app_name }}.env"
        
    - name: Enable Apache modules
      apache2_module:
        name: "{{ item }}"
        state: present
      with_items:
        - proxy
        - proxy_http
        - headers
        - ssl
        
    - name: Create Apache virtual host configuration
      template:
        src: templates/apache-vhost.conf.j2
        dest: "/etc/apache2/sites-available/{{ app_name }}.conf"
        mode: '0644'
        
    - name: Enable Apache virtual host
      command: a2ensite {{ app_name }}.conf
      
    - name: Disable default Apache site
      command: a2dissite 000-default.conf
      
    - name: Restart Apache
      service:
        name: apache2
        state: restarted
        