name: "Terraform Infrastructure Change Management"

on:
  push:
    branches:
    - main
    paths:
    - infrastructure/terraform/**
  pull_request:
    branches:
    - main
    paths:
    - infrastructure/terraform/**
  workflow_dispatch:

env:
  # Verbosity setting for Terraform logs
  TF_LOG: INFO
  # Environment variables for DigitalOcean & S3-compatible backend
  TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
  TF_VAR_ssh_key: ${{ secrets.SSH_KEY_NAME }}
  TF_VAR_do_spaces_access_key_id: ${{ secrets.DO_SPACES_ACCESS_KEY_ID }}
  TF_VAR_do_spaces_access_key_secret: ${{ secrets.DO_SPACES_ACCESS_KEY_SECRET }}
  TF_VAR_do_bucket_name: "paysoko-assessment"
  AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_ACCESS_KEY_SECRET }}

jobs:
  terraform:
    name: "Terraform Infrastructure Change Management"
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        # Corrected working directory based on repository structure
        working-directory: ./infrastructure/terraform
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0
          terraform_wrapper: false
      
      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform Validate
        id: validate
        run: terraform validate
      
      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
        run: terraform plan -no-color
        continue-on-error: true
      
      - name: Add Plan Comment to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          PLAN: "${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
      
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false
        