# .github/workflows/terraform.yml
name: Terraform Infrastructure

on:
  pull_request:
    paths:
      - 'terraform/**'
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    # Set environment variables at the job level
    env:
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
      TF_VAR_ssh_key: ${{ secrets.SSH_KEY_NAME }}
      TF_VAR_do_spaces_access_key_id: ${{ secrets.DO_SPACES_ACCESS_KEY_ID }}
      TF_VAR_do_spaces_access_key_secret: ${{ secrets.DO_SPACES_ACCESS_KEY_SECRET }}
      TF_VAR_do_bucket_name: "paysoko-assessment"
      AWS_ACCESS_KEY_ID: ${{ secrets.DO_SPACES_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DO_SPACES_ACCESS_KEY_SECRET }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # For PRs, checkout the PR branch
          ref: ${{ github.event.pull_request.head.ref }}
          # For PRs, use the PR repository
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          # Fetch all history for potential comparisons
          fetch-depth: 0
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.0.0'
          terraform_wrapper: false
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      
      - name: Terraform Init
        id: init
        working-directory: terraform
        run: terraform init
      
      - name: Terraform Validate
        id: validate
        working-directory: terraform
        run: terraform validate -no-color
      
      - name: Terraform Format
        id: fmt
        working-directory: terraform
        run: terraform fmt -check
        continue-on-error: true
      
      - name: Terraform Plan
        id: plan
        working-directory: terraform
        run: terraform plan -no-color -out=tfplan
        continue-on-error: true
      
      - name: Post Plan to PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Get the output of the plan step
            const { outcome, conclusion } = ${{ toJSON(steps.plan) }};
            
            // Format the output message
            const output = `### Terraform Plan Results üìù
            
            #### Validation: ${{ steps.validate.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            #### Format: ${{ steps.fmt.outcome == 'success' && '‚úÖ Passed' || '‚ö†Ô∏è Failed' }}
            #### Plan: ${{ steps.plan.outcome == 'success' && '‚úÖ Success' || '‚ùå Failed' }}
            
            <details><summary>Show Plan</summary>
            
            \`\`\`terraform
            ${process.env.TERRAFORM_PLAN}
            \`\`\`
            
            </details>
            
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            // Post comment to PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
        env:
          TERRAFORM_PLAN: ${{ steps.plan.outputs.stdout }}
      
      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        working-directory: terraform
        run: terraform apply -auto-approve tfplan
        